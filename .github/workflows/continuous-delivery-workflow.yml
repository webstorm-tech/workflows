name: Continuous Delivery Workflow

on:
  push:
    branches:
      - 'main'

  workflow_dispatch:

permissions:
  contents: write

jobs:
  gitVersionJob:
    name: Run GitVersion
    runs-on: ubuntu-latest
    outputs:
      major: ${{ steps.execute-gitversion-step.outputs.major }}
      minor: ${{ steps.execute-gitversion-step.outputs.minor }}
      patch: ${{ steps.execute-gitversion-step.outputs.patch }}
      majorMinor: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}
      releaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}.${{ steps.execute-gitversion-step.outputs.patch }}${{ steps.execute-gitversion-step.outputs.preReleaseTagWithDash }}
      majorMinorReleaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}.${{ steps.execute-gitversion-step.outputs.minor }}${{ steps.execute-gitversion-step.outputs.preReleaseTagWithDash }}
      majorReleaseLabel: ${{ steps.execute-gitversion-step.outputs.major }}${{ steps.execute-gitversion-step.outputs.preReleaseTagWithDash }}
      semVer: ${{ steps.execute-gitversion-step.outputs.semver }}
      shortSha: ${{ steps.execute-gitversion-step.outputs.shortSha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        id: install-gitversion-step
        uses: gittools/actions/gitversion/setup@v0.10.2
        with:
          versionSpec: '5.x'
        
      - name: Execute GitVersion
        id: execute-gitversion-step
        uses: gittools/actions/gitversion/execute@v0.10.2

  tagRepoMajorJob:
    name: Tag Repo w/ Major
    needs: [gitVersionJob]
    runs-on: ubuntu-latest
    steps:
      - name: Create tag
        uses: actions/github-script@v6
        with:
          script: |
            try {
              console.log("Chekcing if v${{ needs.gitVersionJob.outputs.major }} tag exists...")
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/v${{ needs.gitVersionJob.outputs.major }}'
              })

              console.log("Deleteing the v${{ needs.gitVersionJob.outputs.major }} tag...")
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/v${{ needs.gitVersionJob.outputs.major }}'
              })
            } catch (error) {
              if (error.status === 404) {
                console.log("The v${{ needs.gitVersionJob.outputs.major }} tag does not exist...")
              } else {
                throw error;
              }
            }

            console.log("Creating the v${{ needs.gitVersionJob.outputs.major }} tag...")
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ needs.gitVersionJob.outputs.major }}',
              sha: context.sha
            })

            try {
              console.log("Chekcing if v${{ needs.gitVersionJob.outputs.majorMinor }} tag exists...")
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/v${{ needs.gitVersionJob.outputs.majorMinor }}'
              })

              console.log("Deleteing the v${{ needs.gitVersionJob.outputs.majorMinor }} tag...")
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/v${{ needs.gitVersionJob.outputs.majorMinor }}'
              })
            } catch (error) {
              if (error.status === 404) {
                console.log("The v${{ needs.gitVersionJob.outputs.majorMinor }} tag does not exist...")
              } else {
                throw error;
              }
            }

            console.log("Creating the v${{ needs.gitVersionJob.outputs.majorMinor }} tag...")
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/v${{ needs.gitVersionJob.outputs.majorMinor }}',
              sha: context.sha
            })
            
